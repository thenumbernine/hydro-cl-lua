//// MODULE_NAME: calcFluxForInterface
//// MODULE_DEPENDS: <?=Solver?>

namespace <?=Solver?> {
struct RusanovFlux {
	static inline  Cons calcFluxForInterface(
		constant Solver const & solver,
		Cons const & UL,
		Cons const & UR,
		Cell const & cellL,
		Cell const & cellR,
		real3 const xInt,
		Normal const n
	) {
		Cons result;
		real lambdaMax;
		real lambdaMinL, lambdaMaxL;
		Eqn::consWaveCodeMinMax(solver, UL, n, xInt, &lambdaMinL, &lambdaMaxL);
		lambdaMax = max(fabs(lambdaMinL), fabs(lambdaMaxL));
		real lambdaMinR, lambdaMaxR;
		Eqn::consWaveCodeMinMax(solver, UR, n, xInt, &lambdaMinR, &lambdaMaxR);
		lambdaMax = max(lambdaMax, max(fabs(lambdaMinR), fabs(lambdaMaxR)));
		Cons FL = Eqn::fluxFromCons(solver, UL, cellL, n);
		Cons FR = Eqn::fluxFromCons(solver, UR, cellR, n);
		for (int j = 0; j < numIntStates; ++j) {
			result.s[j] = .5 * (FL.s[j] + FR.s[j] - lambdaMax * (UR.s[j] - UL.s[j]));
		}
		return result;
	}
};
using Flux = RusanovFlux;
}	//namespace <?=Solver?> {
