--[[
WENO solver:
sources:
1996 Jiang, Shu, "Efficient Implementation of Weighted ENO Schemes"
1998 Shu "Essentially Non-Oscillatory and Weighted Essentially Non-Oscillatory Schemes for Hyperbolic Conservation Laws"
"A hybrid approach for the regularized long wave-Burgers equation"
2016 Rathan, Raju "An improved Non-linear Weights for Seventh-Order WENO Scheme"
https://github.com/jzrake/Mara for weno5 examples
https://github.com/wme7/WENO7-Z/blob/master/WENO7ZresAdv1d.m for weno7 examples
https://github.com/python-hydro/hydro_examples/blob/master/compressible/weno_coefficients.py likewise

TODO incorporate parallel propagators
--]]
local ffi = require 'ffi'
local class = require 'ext.class'
local table = require 'ext.table'
local range = require 'ext.range'
local path = require 'ext.path'
local real = require 'hydro.real'
local FiniteVolumeSolver = require 'hydro.solver.fvsolver'

local common = require 'hydro.common'
local xNames = common.xNames
local symNames = common.symNames
local from3x3to6 = common.from3x3to6
local from6to3x3 = common.from6to3x3
local sym = common.sym


local WENO = class(FiniteVolumeSolver)
WENO.name = 'WENO'

WENO.stencilSize = 3

WENO.wenoMethod = '1996 Jiang Shu'	-- (WENO-JS)
--WENO.wenoMethod = '2008 Borges'	-- (WENO-Z)
--WENO.wenoMethod = '2010 Shen Zha'	-- (WENO-BS?)

WENO.fluxMethod = 'Lax-Friedrichs'
--WENO.fluxMethod = 'Marquina'
--WENO.fluxMethod = 'Roe'	-- isn't as accurate ... and has an error? FIXME?

WENO.coeffs = {
	-- [r] of table 1 of 1996 Jiang, Shu
	[2] = {
		d = {1/3, 2/3},
		-- coeffs[r].a[k][l] == a^r_k,l of table 1 of 1996 Jiang, Shu
		a = {
			{-1/2,	3/2,	},
			{1/2,	1/2,	},
		},
		betaCoeffs = {
			{
				{1},
				{-2, 1},
			}, {
				{1},
				{-2, 1},
			},
		},
	},

	[3] = {
-- [[
		d = {1/10, 6/10, 3/10},
		a = {
			{ 2/6,	-7/6, 11/6, },
			{-1/6,	 5/6,  2/6, },
			{ 2/6,	 5/6, -1/6, },
		},
--]]
--[[ which paper is this from?
		d = {1/16,	10/16,	5/16},
		a = {
			{3/8,	-10/8,	15/8},
			{-1/8,	6/8,	3/8},
			{3/8,	6/8,	-1/8},
		},
--]]
		betaCoeffs = {
			{
				{4/3},
				{-19/3,	25/3},
				{11/3,	-31/3,	10/3},
			}, {
				{4/3},
				{-13/3,	13/3},
				{5/3,	-13/3,	4/3},
			}, {
				{10/3},
				{-31/3,	25/3},
				{11/3,	-19/3,	4/3},
			},
		},
	},

	[4] = {
		d = {1/35, 12/35, 18/35, 4/35},
		a = {
			{-3/12, 13/12, -23/12, 25/12, },
			{ 1/12, -5/12,  13/12,  3/12, },
			{-1/12,  7/12,   7/12, -1/12, },
			{ 3/12, 13/12,  -5/12,  1/12, },
		},
		betaCoeffs = {

--[[
			{
				{ 2107/240},
				{-9402/240,  11003/240},
				{ 7042/240, -17246/240,   7043/240},
				{-1854/240,   4642/240,  -3882/240,    547/240},
			},
			{
				{  547/240},
				{-2522/240,   3443/240},
				{ 1922/240,  -5966/240,   2843/240},
				{ -494/240,   1602/240,  -1642/240,    267/240},
			},
			{
				{  267/240},
				{-1642/240,   2843/240},
				{ 1602/240,  -5966/240,   3443/240},
				{ -494/240,   1922/240,  -2522/240,    547/240},
			},
			{
				{  547/240},
				{-3882/240,   7043/240},
				{ 4642/240, -17246/240,  11003/240},
				{-1854/240,   7042/240,  -9402/240,   2107/240},
			},
--]]
-- [[ 2016 Rathan, Raju after eqn 12 ...
-- https://github.com/wme7/WENO7-Z/blob/master/WENO7ZresAdv1d.m
			{
				{  6649},
				{-47214,	  85641},
				{ 56694,	-210282,	134241},
				{-22778,	  86214,	-114894,	25729},
			},
			{
				{  3169},
				{-19374,	 33441},
				{ 19014,	-70602,	 41001},
				{ -5978,	 23094,	-30414,	6649},
			},
			{
				{  6649},
				{-30414,	 41001},
				{ 23094,	-70602,	 33441},
				{ -5978,	 19014,	-19374,	3169},
			},
			{
				{  25729},
				{-114894,	134241},
				{  86214,	-210282,	85641},
				{ -22778,	  56694,	-47214,	6649},
			},
--]]
		},
	},
	[5] = {
		d = {  1/126,  20/126,  60/126,  40/126,   5/126 },
		a = {
			{12/60, -63/60, 137/60, -163/60, 137/60, },
			{-3/60,  17/60, -43/60,   77/60,  12/60, },
			{ 2/60, -13/60,  47/60,   27/60,  -3/60, },
			{-3/60,  27/60,  47/60,  -13/60,   2/60, },
			{12/60,  77/60, -43/60,   17/60,  -3/60, },
		},
		betaCoeffs = {
			{
				{  107918/5040},
				{ -649501/5040,  1020563/5040},
				{  758823/5040, -2462076/5040,  1521393/5040},
				{ -411487/5040,  1358458/5040, -1704396/5040,   482963/5040},
				{   86329/5040,  -288007/5040,   364863/5040,  -208501/5040,    22658/5040},
			},
			{
				{   22658/5040},
				{ -140251/5040,   242723/5040},
				{  165153/5040,  -611976/5040,   406293/5040},
				{  -88297/5040,   337018/5040,  -464976/5040,   138563/5040},
				{   18079/5040,   -70237/5040,    99213/5040,   -60871/5040,     6908/5040},
			},
			{
				{    6908/5040},
				{  -51001/5040,   104963/5040},
				{   67923/5040,  -299076/5040,   231153/5040},
				{  -38947/5040,   179098/5040,  -299076/5040,   104963/5040},
				{    8209/5040,   -38947/5040,    67923/5040,   -51001/5040,     6908/5040},
			},
			{
				{    6908/5040},
				{  -60871/5040,   138563/5040},
				{   99213/5040,  -464976/5040,   406293/5040},
				{  -70237/5040,   337018/5040,  -611976/5040,   242723/5040},
				{   18079/5040,   -88297/5040,   165153/5040,  -140251/5040,    22658/5040},
			},
			{
				{   22658/5040},
				{ -208501/5040,   482963/5040},
				{  364863/5040, -1704396/5040,  1521393/5040},
				{ -288007/5040,  1358458/5040, -2462076/5040,  1020563/5040},
				{   86329/5040,  -411487/5040,   758823/5040,  -649501/5040,   107918/5040},
			},
		},
	},

	[6] = {
		d = { 1/462,   30/462,  150/462,  200/462,   75/462,    6/462 },
		a = {
			{-10/60,  62/60, -163/60, 237/60, -213/60, 147/60, },
			{  2/60, -13/60,   37/60, -63/60,   87/60,  10/60, },
			{ -1/60,   7/60,  -23/60,  57/60,   22/60,  -2/60, },
			{  1/60,  -8/60,   37/60,  37/60,   -8/60,   1/60, },
			{ -2/60,  22/60,   57/60, -23/60,    7/60,  -1/60, },
			{ 10/60,  87/60,  -63/60,  37/60,  -13/60,   2/60, },
		},
		betaCoeffs = {
			{
				{   6150211/120960,},
				{ -47460464/120960,   94851237/120960,},
				{  76206736/120960, -311771244/120960,  260445372/120960,},
				{ -63394124/120960,  262901672/120960, -444003904/120960,  190757572/120960,},
				{  27060170/120960, -113206788/120960,  192596472/120960, -166461044/120960,   36480687/120960,},
				{  -4712740/120960,   19834350/120960,  -33918804/120960,   29442256/120960,  -12950184/120960,    1152561/120960,},
			}, {
				{   1152561/120960,},
				{  -9117992/120960,   19365967/120960,},
				{  14742480/120960,  -65224244/120960,   56662212/120960,},
				{ -12183636/120960,   55053752/120960,  -97838784/120960,   43093692/120960,},
				{   5134574/120960,  -23510468/120960,   42405032/120960,  -37913324/120960,    8449957/120960,},
				{   -880548/120960,    4067018/120960,   -7408908/120960,    6694608/120960,   -3015728/120960,     271779/120960,},
			}, {
				{    271779/120960,},
				{  -2380800/120960,    5653317/120960,},
				{   4086352/120960,  -20427884/120960,   19510972/120960,},
				{  -3462252/120960,   17905032/120960,  -35817664/120960,   17195652/120960,},
				{   1458762/120960,   -7727988/120960,   15929912/120960,  -15880404/120960,    3824847/120960,},
				{   -245620/120960,    1325006/120960,   -2792660/120960,    2863984/120960,   -1429976/120960,     139633/120960,},
			}, {
				{    139633/120960,},
				{  -1429976/120960,    3824847/120960,},
				{   2863984/120960,  -15880404/120960,   17195652/120960,},
				{  -2792660/120960,   15929912/120960,  -35817664/120960,   19510972/120960,},
				{   1325006/120960,   -7727988/120960,   17905032/120960,  -20427884/120960,    5653317/120960,},
				{   -245620/120960,    1458762/120960,   -3462252/120960,    4086352/120960,   -2380800/120960,     271779/120960,},
			}, {
				{    271779/120960,},
				{  -3015728/120960,    8449957/120960,},
				{   6694608/120960,  -37913324/120960,   43093692/120960,},
				{  -7408908/120960,   42405032/120960,  -97838784/120960,   56662212/120960,},
				{   4067018/120960,  -23510468/120960,   55053752/120960,  -65224244/120960,   19365967/120960,},
				{   -880548/120960,    5134574/120960,  -12183636/120960,   14742480/120960,   -9117992/120960,    1152561/120960,},
			}, {
				{   1152561/120960,},
				{ -12950184/120960,   36480687/120960,},
				{  29442256/120960, -166461044/120960,  190757572/120960,},
				{ -33918804/120960,  192596472/120960, -444003904/120960,  260445372/120960,},
				{  19834350/120960, -113206788/120960,  262901672/120960, -311771244/120960,   94851237/120960,},
				{  -4712740/120960,   27060170/120960,  -63394124/120960,   76206736/120960,  -47460464/120960,    6150211/120960,},
			},
		},
	},

	[7] = {
		d = {  1/1716,   42/1716,  315/1716,  700/1716,  525/1716,  126/1716,    7/1716 },
		a = {
			{  60/420, -430/420, 1334/420, -2341/420, 2559/420, -1851/420, 1089/420, },
			{ -10/420,   74/420, -241/420,   459/420, -591/420,   669/420,   60/420, },
			{   4/420,  -31/420,  109/420,  -241/420,  459/420,   130/420,  -10/420, },
			{  -3/420,   25/420, -101/420,   319/420,  214/420,   -38/420,    4/420, },
			{   4/420,  -38/420,  214/420,   319/420, -101/420,    25/420,   -3/420, },
			{ -10/420,  130/420,  459/420,  -241/420,  109/420,   -31/420,    4/420, },
			{  60/420,  669/420, -591/420,   459/420, -241/420,    74/420,  -10/420, },
		},
		betaCoeffs = {
			{
				{    7177657304/59875200},
				{  -68289277071/59875200,   166930543737/59875200},
				{  140425750893/59875200,  -698497961463/59875200,   739478564460/59875200},
				{ -158581758572/59875200,   797280592452/59875200, -1701893556420/59875200,   985137198380/59875200},
				{  102951716988/59875200,  -521329653333/59875200,  1119254208255/59875200, -1301580166020/59875200,   431418789360/59875200},
				{  -36253275645/59875200,   184521097818/59875200,  -397822832973/59875200,   464200620612/59875200,  -308564463663/59875200,    55294430841/59875200},
				{    5391528799/59875200,   -27545885877/59875200,    59577262788/59875200,   -69700128812/59875200,    46430779053/59875200,   -16670007831/59875200,     1258225940/59875200},
			}, {
				{    1258225940/59875200},
				{  -12223634361/59875200,    31090026771/59875200},
				{   25299603603/59875200,  -132164397513/59875200,   143344579860/59875200},
				{  -28498553012/59875200,   151212114012/59875200,  -332861569020/59875200,   195601143380/59875200},
				{   18375686988/59875200,   -98508059523/59875200,   219064013505/59875200,  -259838403420/59875200,    86959466460/59875200},
				{   -6414710427/59875200,    34632585198/59875200,   -77574968883/59875200,    92646554652/59875200,   -62392325913/59875200,    11250068787/59875200},
				{     945155329/59875200,    -5128661355/59875200,    11548158588/59875200,   -13862429972/59875200,     9380155443/59875200,    -3397272201/59875200,      257447084/59875200},
			}, {
				{     257447084/59875200},
				{   -2659103847/59875200,     7257045753/59875200},
				{    5684116173/59875200,   -32164185663/59875200,    36922302360/59875200},
				{   -6473137292/59875200,    37531128132/59875200,   -88597133220/59875200,    54531707180/59875200},
				{    4158865908/59875200,   -24530177853/59875200,    59045150655/59875200,   -74236325220/59875200,    25788772260/59875200},
				{   -1432622085/59875200,     8555779674/59875200,   -20891234853/59875200,    26694456132/59875200,   -18869146983/59875200,     3510366201/59875200},
				{     206986975/59875200,    -1247531949/59875200,     3078682188/59875200,    -3982402892/59875200,     2854088973/59875200,    -1077964287/59875200,       84070496/59875200},
			}, {
				{      84070496/59875200},
				{    -969999969/59875200,     2927992563/59875200},
				{    2283428883/59875200,   -14296379553/59875200,    18133963560/59875200},
				{   -2806252532/59875200,    18083339772/59875200,   -47431870620/59875200,    32154783380/59875200},
				{    1902531828/59875200,   -12546315963/59875200,    33820678305/59875200,   -47431870620/59875200,    18133963560/59875200},
				{    -676871859/59875200,     4550242446/59875200,   -12546315963/59875200,    18083339772/59875200,   -14296379553/59875200,     2927992563/59875200},
				{      99022657/59875200,     -676871859/59875200,     1902531828/59875200,    -2806252532/59875200,     2283428883/59875200,     -969999969/59875200,       84070496/59875200},
			}, {
				{      84070496/59875200},
				{   -1077964287/59875200,     3510366201/59875200},
				{    2854088973/59875200,   -18869146983/59875200,    25788772260/59875200},
				{   -3982402892/59875200,    26694456132/59875200,   -74236325220/59875200,    54531707180/59875200},
				{    3078682188/59875200,   -20891234853/59875200,    59045150655/59875200,   -88597133220/59875200,    36922302360/59875200},
				{   -1247531949/59875200,     8555779674/59875200,   -24530177853/59875200,    37531128132/59875200,   -32164185663/59875200,     7257045753/59875200},
				{     206986975/59875200,    -1432622085/59875200,     4158865908/59875200,    -6473137292/59875200,     5684116173/59875200,    -2659103847/59875200,      257447084/59875200},
			}, {
				{     257447084/59875200},
				{   -3397272201/59875200,    11250068787/59875200},
				{    9380155443/59875200,   -62392325913/59875200,    86959466460/59875200},
				{  -13862429972/59875200,    92646554652/59875200,  -259838403420/59875200,   195601143380/59875200},
				{   11548158588/59875200,   -77574968883/59875200,   219064013505/59875200,  -332861569020/59875200,   143344579860/59875200},
				{   -5128661355/59875200,    34632585198/59875200,   -98508059523/59875200,   151212114012/59875200,  -132164397513/59875200,    31090026771/59875200},
				{     945155329/59875200,    -6414710427/59875200,    18375686988/59875200,   -28498553012/59875200,    25299603603/59875200,   -12223634361/59875200,     1258225940/59875200},
			}, {
				{    1258225940/59875200},
				{  -16670007831/59875200,    55294430841/59875200},
				{   46430779053/59875200,  -308564463663/59875200,   431418789360/59875200},
				{  -69700128812/59875200,   464200620612/59875200, -1301580166020/59875200,   985137198380/59875200},
				{   59577262788/59875200,  -397822832973/59875200,  1119254208255/59875200, -1701893556420/59875200,   739478564460/59875200},
				{  -27545885877/59875200,   184521097818/59875200,  -521329653333/59875200,   797280592452/59875200,  -698497961463/59875200,   166930543737/59875200},
				{    5391528799/59875200,   -36253275645/59875200,   102951716988/59875200,  -158581758572/59875200,   140425750893/59875200,   -68289277071/59875200,     7177657304/59875200},
			},
		},
	},
}



--[[
args:
	wenoMethod
	fluxMethod
	order (5 or 7 only)
--]]
function WENO:init(args)
	self.wenoMethod = args.wenoMethod
	self.fluxMethod = args.fluxMethod

	local order = args.order
	if order then
		self.stencilSize = (order+1)/2
	end

	self.numGhost = self.stencilSize
	WENO.super.init(self, args)
end

-- don't let the parent create a flux object or require a flux arg
-- TODO WENO should be a 'Flux' object rather than a 'Solver'
function WENO:createFlux()
	self.flux = {
		initCodeModules = function() end,
	}
end

function WENO:initCodeModule_calcFlux()
end

-- TODO find what intermediate values to buffer for perf increase
function WENO:createBuffers()
	WENO.super.createBuffers(self)

	-- flux of cell-centered state values
--	self:clalloc('fluxCellBuf', self.eqn.symbols.cons_t, self.numCells * self.dim)
end

function WENO:initCodeModule_calcFlux()
	self.modules:addFromMarkup(
		self.eqn:template(path'hydro/solver/weno.clcpp':read(), {
			clnumber = require 'cl.obj.number',
		})
	)
	-- another one that would be added by flux on fvsolver:
	self.modules:add{
		name = 'calcFluxForInterface',
	}
end

-- all these are found eqn's cl code
function WENO:refreshSolverProgram()
	WENO.super.refreshSolverProgram(self)

--	self.calcCellFluxKernelObj = self.solverProgramObj:kernel'calcCellFlux'

	self.calcFluxKernelObj = self.solverProgramObj:kernel(self.symbols.calcFlux)
	self.calcFluxKernelObj.obj:setArg(1, self.fluxBuf)
end

-- NOTICE this adds the contents of derivBufObj and does not clear it
function WENO:calcDeriv(derivBufObj, dt)
	local dtArg = real(dt)

	if self.usePLM then
		self.calcLRKernelObj(self.solverBuf, self.cellBuf, self.UBuf, self.UBuf, dtArg)
	end

--[[
	self.calcCellFluxKernelObj.obj:setArg(0, self.solverBuf)
	self.calcCellFluxKernelObj.obj:setArg(1, self.fluxCellBuf)
	self.calcCellFluxKernelObj.obj:setArg(2, self.UBuf)
	self.calcCellFluxKernelObj()
--]]

	self.calcFluxKernelObj.obj:setArg(0, self.solverBuf)
	self.calcFluxKernelObj.obj:setArg(1, self.fluxBuf)
	self.calcFluxKernelObj.obj:setArg(2, self:getULRBuf())
	self.calcFluxKernelObj.obj:setArg(3, self.cellBuf)
--	self.calcFluxKernelObj.obj:setArg(4, self.fluxCellBuf)
	self.calcFluxKernelObj()

-- [=[ this is from the 2017 Zingale "Introduction to Computational Astrophysics"
	if self.useCTU then
		self:boundary()
		-- if we're using CTU then ...
		-- 1) calc fluxes based on a slope-limiter method (PLM, etc)
		-- 2) at each interface, integrate each dimension's LR states by all other dimensions' fluxes with a timestep of -dt/2
		--	( don't use the deriv buf because it already has the sum of all dimensions' flux differences)
		self.updateCTUKernelObj(self.solverBuf, self.cellBuf, self.UBuf, self.fluxBuf, dtArg)

--		self.calcCellFluxKernelObj()

		-- now we need to calcBounds on the ULR
		-- TODO this will break for mirror conditions
		-- because I haven't got the boundary code flexible enough to operate on specific fields within the L & R fields of the ULRBuf
		self:boundaryLR()

		-- 3) use the final LR states to calculate the flux ...

		-- the rest of this matches above
		-- maybe use 'repeat'?

		self.calcFluxKernelObj()
	end
--]=]

	self:boundary()
	self.calcDerivFromFluxKernelObj.obj:setArg(1, derivBufObj.obj)
self.calcDerivFromFluxKernelObj.obj:setArg(0, self.solverBuf)
self.calcDerivFromFluxKernelObj.obj:setArg(2, self.fluxBuf)
	self.calcDerivFromFluxKernelObj()
end

return WENO
